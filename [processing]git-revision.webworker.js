(self.webpackChunk_wixc3_component_playground=self.webpackChunk_wixc3_component_playground||[]).push([[4488],{78435:t=>{var e="undefined"!=typeof Element,i="function"==typeof Map,s="function"==typeof Set,r="function"==typeof ArrayBuffer&&!!ArrayBuffer.isView;function a(t,n){if(t===n)return!0;if(t&&n&&"object"==typeof t&&"object"==typeof n){if(t.constructor!==n.constructor)return!1;var o,c,h,u;if(Array.isArray(t)){if((o=t.length)!=n.length)return!1;for(c=o;0!=c--;)if(!a(t[c],n[c]))return!1;return!0}if(i&&t instanceof Map&&n instanceof Map){if(t.size!==n.size)return!1;for(u=t.entries();!(c=u.next()).done;)if(!n.has(c.value[0]))return!1;for(u=t.entries();!(c=u.next()).done;)if(!a(c.value[1],n.get(c.value[0])))return!1;return!0}if(s&&t instanceof Set&&n instanceof Set){if(t.size!==n.size)return!1;for(u=t.entries();!(c=u.next()).done;)if(!n.has(c.value[0]))return!1;return!0}if(r&&ArrayBuffer.isView(t)&&ArrayBuffer.isView(n)){if((o=t.length)!=n.length)return!1;for(c=o;0!=c--;)if(t[c]!==n[c])return!1;return!0}if(t.constructor===RegExp)return t.source===n.source&&t.flags===n.flags;if(t.valueOf!==Object.prototype.valueOf)return t.valueOf()===n.valueOf();if(t.toString!==Object.prototype.toString)return t.toString()===n.toString();if((o=(h=Object.keys(t)).length)!==Object.keys(n).length)return!1;for(c=o;0!=c--;)if(!Object.prototype.hasOwnProperty.call(n,h[c]))return!1;if(e&&t instanceof Element)return!1;for(c=o;0!=c--;)if(("_owner"!==h[c]&&"__v"!==h[c]&&"__o"!==h[c]||!t.$$typeof)&&!a(t[h[c]],n[h[c]]))return!1;return!0}return t!=t&&n!=n}t.exports=function(t,e){try{return a(t,e)}catch(t){if((t.message||"").match(/stack|recursion/i))return console.warn("react-fast-compare cannot handle circular refs"),!1;throw t}}},68941:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Context=void 0;const s=i(5163),r=i(93849),a=s.__importStar(i(2206));e.default=new r.Feature({id:"gitCommands",dependencies:[a.default.asEntity],api:{gitCommandsService:r.Service.withType().defineEntity(a.processingEnv).allowRemoteAccess((0,r.declareComEmitter)("subscribe","unsubscribe"))},context:{gitCommandsContext:a.processingEnv.withContext()}}),e.Context=a.processingEnv.useContext("live-server")},54718:function(t,e,i){"use strict";var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=i(68941);Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s(r).default}})},51172:(t,e)=>{"use strict";var i;Object.defineProperty(e,"__esModule",{value:!0}),e.GitHttpsAuthError=e.parseGitStderrForErrorMessage=e.getGitErrorCode=e.GitErrorCode=void 0,function(t){t.HTTPSAuthenticationFailed="GIT_HTTPS_AUTH_FAILED",t.SSHPermissionDenied="GIT_SSH_PERMISSION_DENIED",t.NotAGitRepository="NOT_A_GIT_REPOSITORY",t.GitNotFound="GIT_NOT_FOUND"}(i=e.GitErrorCode||(e.GitErrorCode={}));const s=[{pattern:"fatal: Authentication failed for 'https://",errorCode:i.HTTPSAuthenticationFailed},{pattern:"fatal: could not read Username for 'https://",errorCode:i.HTTPSAuthenticationFailed},{pattern:"fatal: Could not read from remote repository.",errorCode:i.SSHPermissionDenied},{pattern:"fatal: not a git repository",errorCode:i.NotAGitRepository}];e.getGitErrorCode=function(t){const e=s.find((({pattern:e})=>e instanceof RegExp?e.test(t):t.includes(e)));return null==e?void 0:e.errorCode},e.parseGitStderrForErrorMessage=function(t){var e;return null===(e=t.match(/(fatal|error):[\s\S]+/))||void 0===e?void 0:e[0]};class r extends Error{constructor(){super(...arguments),this.code=i.HTTPSAuthenticationFailed,this.credentialsProvided=!1}}e.GitHttpsAuthError=r},18859:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),i(5163).__exportStar(i(51172),e)},35784:(t,e,i)=>{t.exports=i(54718)},2550:(t,e,i)=>{t.exports=i(18859)},20137:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(5163),r=i(93849),a=i(32510),n=s.__importDefault(i(35784)),o=s.__importStar(i(2206)),c=i(5689),h=(0,a.defineOneWayResource)().defineEntity(o.processingEnv),u=(0,a.defineOneWayResource)().defineEntity(o.processingEnv),d=(0,a.defineComputedResource)().defineEntity(o.processingEnv),l=(0,a.defineOneWayResource)().defineEntity(o.processingEnv),g=(0,a.defineOneWayResource)().defineEntity(o.processingEnv),p=(0,a.defineOneWayResource)().defineEntity(o.processingEnv),f=(0,a.defineComputedResource)().defineEntity(o.processingEnv);e.default=new r.Feature({id:"gitRevision",dependencies:[o.default.asEntity,n.default.asEntity],api:{gitService:r.Service.withType().defineEntity(o.processingEnv).allowRemoteAccess(),gitDetector:r.Service.withType().defineEntity(o.processingEnv).allowRemoteAccess(),gitFetcher:r.Service.withType().defineEntity(o.processingEnv).allowRemoteAccess(),gitFetcherOption:new r.Config({fetchInterval:6e5,enabled:!0}),gitSyncRepoService:r.Service.withType().defineEntity(o.processingEnv).allowRemoteAccess(),gitHeadResourceManager:h,gitHeadResourceManagerMain:h.defineConsumer(c.mainEnv),gitRepoStatusResourceManager:u,gitRepoStatusResourceManagerMain:u.defineConsumer(c.mainEnv),gitFileStatusResourceManager:d,gitFileStatusResourceManagerMain:d.defineConsumer(c.mainEnv),gitBranchListResourceManager:l,gitBranchListResourceManagerMain:l.defineConsumer(c.mainEnv),gitMergeStateResourceManager:g,gitMergeStateResourceManagerMain:g.defineConsumer(c.mainEnv),gitSyncRepoResourceManager:p,gitSyncRepoResourceManagerMain:p.defineConsumer(c.mainEnv),gitTrackingBranchResourceManager:f,gitTrackingBranchResourceManagerMain:f.defineConsumer(c.mainEnv),gitConflictsService:r.Service.withType().defineEntity(o.processingEnv).allowRemoteAccess(),gitEventEmitter:r.Service.withType().defineEntity(o.processingEnv),gitMonitoringService:r.Service.withType().defineEntity(o.processingEnv).allowRemoteAccess()}})},29934:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(5163),r=i(93849),a=i(2206),n=i(47272),o=i(16778),c=i(56098),h=i(85131),u=i(81199),d=i(51592),l=i(49136);s.__importDefault(i(20137)).default.setup(a.processingEnv,(({gitFileStatusResourceManager:t,gitHeadResourceManager:e,gitRepoStatusResourceManager:i,gitBranchListResourceManager:s,gitMergeStateResourceManager:a,gitSyncRepoResourceManager:g,gitTrackingBranchResourceManager:p,gitFetcherOption:{fetchInterval:f,enabled:R},onDispose:S},{gitCommands:{gitCommandsService:E},project:{fs:_,projectService:v,fsResourcesSyncer:y}})=>{const m=[];S((()=>Promise.all(m.map((t=>t())))));const w=()=>v.getProjectPath(),C=new c.GitEventEmitter;m.push((()=>C.clear()));const T=e.provide({handler:n.gitHeadResourceHandler}),F=i.provide({handler:n.gitRepoStatusResourceHandler}),G=t.provide({dependencies:[F],handler:new n.GitFileStatusResourceComputer(F)}),I=s.provide({handler:n.gitBranchListResourceHandler}),M=a.provide({handler:n.gitMergeStateResourceHandler}),b=g.provide({handler:n.gitSyncRepoResourceHandler,resourceConstructor:l.GitSyncRepoResource}),P=new n.GitFetcher(E,C,f);m.push((()=>P.dispose()));const A=new n.GitRepoStatusResourceSyncer(T,F,E,y,C,(t=>_.join(w(),t)));m.push((()=>A.dispose()));const O=new n.GitBranchListResourceSyncer(E,I,C);m.push((()=>O.dispose()));const H=new u.GitService(E,F,A,C,(t=>_.relative(w(),t))),D=p.provide({dependencies:[T],handler:new n.GitTrackingBranchResourceComputer(T,H)}),B=new d.GitSyncRepoService(E,H,P,b,C,D);m.push((()=>B.dispose()));const k=new o.GitConflictsService(E,F,M),U=new n.GitDetector(E,_.join);m.push((()=>U.dispose())),U.subscribeToGitDetected((({gitPath:t})=>{R&&P.init();const e=new n.GitHeadResourceSyncer(T,_,t);m.push((()=>e.dispose()));const i=new n.GitMergeStateResourceSyncer(M,_,t);m.push((()=>i.dispose())),e.init().catch(r.reportError),i.init().catch(r.reportError),A.init().catch(r.reportError),O.init().catch(r.reportError)}));const L=new h.GitMonitoringService(U,B);return{gitService:H,gitFetcher:P,gitHeadResourceManager:T,gitRepoStatusResourceManager:F,gitFileStatusResourceManager:G,gitBranchListResourceManager:I,gitMergeStateResourceManager:M,gitSyncRepoResourceManager:b,gitTrackingBranchResourceManager:D,gitDetector:U,gitSyncRepoService:B,gitConflictsService:k,gitEventEmitter:C,gitMonitoringService:L}}))},87309:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.REMOTE_ORIGIN_HEAD=e.REMOTE_BRANCH_PREFIX=e.LOCAL_BRANCH_PREFIX=void 0,e.LOCAL_BRANCH_PREFIX="refs/heads/",e.REMOTE_BRANCH_PREFIX="refs/remotes/",e.REMOTE_ORIGIN_HEAD="refs/remotes/origin/HEAD"},24520:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GitBranchListResourceSyncer=void 0;const s=i(53818),r=i(60814),a=i(93849),n=i(87309);e.GitBranchListResourceSyncer=class{constructor(t,e,i){this.git=t,this.gitEventEmitter=i,this.disposed=!1,this.onFetchEnd=()=>{this.updateBranchList().catch(a.reportError)},this.gitBranchListResource=e.get(s.GIT_BRANCH_LIST_RESOURCE_ID,this)}async init(){await this.updateBranchList(),this.gitEventEmitter.on("fetchEnd",this.onFetchEnd)}dispose(){this.disposed=!0,this.gitBranchListResource.release(this),this.gitEventEmitter.off("fetchEnd",this.onFetchEnd)}async updateBranchList(){const t=await this.getRawBranches();this.disposed||this.lastRawBranches===t||(this.gitBranchListResource.applyChange((0,r.fullChange)(this.rawBranchesToBranchList(t))),this.lastRawBranches=t)}async getRawBranches(){return(await this.git.raw(["for-each-ref","--format","%(refname)","refs/heads","refs/remotes"])).trim()}rawBranchesToBranchList(t){const e=[],i=[];return t&&t.split("\n").forEach((t=>{if(t.startsWith(n.LOCAL_BRANCH_PREFIX))e.push(t.substr(n.LOCAL_BRANCH_PREFIX.length));else{if(!t.startsWith(n.REMOTE_BRANCH_PREFIX))throw new Error("Unknown ref: "+t);t!==n.REMOTE_ORIGIN_HEAD&&i.push(t.substr(n.REMOTE_BRANCH_PREFIX.length))}})),{local:e,remote:i}}}},16778:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GitConflictsService=void 0;const s=i(53818);e.GitConflictsService=class{constructor(t,e,i){this.git=t,this.repoStatusResource=e.get(s.GIT_REPO_STATUS_RESOURCE_ID,this),this.mergeStateResource=i.get(s.GIT_MERGER_STATE_RESOURCE_ID,this)}async resolve(){var t;const e=this.mergeStateResource.getLatest();if(!e.isMergeState)throw new Error("resolve operation is available only while git is in merge state");const i=null===(t=this.repoStatusResource.getLatest())||void 0===t?void 0:t.conflicted;if(!(null==i?void 0:i.length))throw new Error("No conflicted files defined in repo status");i&&(await this.git.raw(["checkout","--theirs",...i]),await this.git.raw(["add",...i])),await this.git.commit(e.mergeMessage)}async abort(){if(!this.mergeStateResource.getLatest().isMergeState)throw new Error("resolve operation is available only while git is in merge state");await this.git.raw(["merge","--abort"])}}},43160:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GitDetector=void 0;const s=i(91570),r=i(93849);e.GitDetector=class{constructor(t,e,i=6e4){this.git=t,this.join=e,this.detectionInterval=i,this.subscribers=(0,s.setupSubscribers)(),this.disposed=!1}async init(){await this.detect()||this.disposed||(this.intervalId=setInterval((()=>{this.detect().then((t=>{t&&this.intervalId&&(clearInterval(this.intervalId),this.intervalId=void 0)})).catch(r.reportError)}),this.detectionInterval))}async dispose(){this.disposed=!0,void 0!==this.intervalId&&(clearInterval(this.intervalId),this.intervalId=void 0),this.pendingAction&&await this.pendingAction,this.subscribers.internals.listeners.clear()}subscribeToGitDetected(t){this.subscribers.subscribe(t)}unsubscribeFromGitDetected(t){this.subscribers.unsubscribe(t)}async detect(){this.pendingAction=this.getRepoRootPath();const t=await this.pendingAction;return this.pendingAction=void 0,!!t&&(this.subscribers.internals.notify({gitPath:t}),!0)}async getRepoRootPath(){try{const t=await this.git.raw(["rev-parse","--show-toplevel"]);return this.join(t.trim(),".git")}catch{return null}}}},56098:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GitEventEmitter=void 0;const s=i(93849);class r extends s.EventEmitter{}e.GitEventEmitter=r},32859:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GitFetcher=void 0;const s=i(91570),r=i(2550),a=i(99559);e.GitFetcher=class{constructor(t,e,i){this.git=t,this.gitEventEmitter=e,this.fetchInterval=i,this.isDisposed=!1,this.backgroundFetchBlockers=new Set,this.backgroundFetch=()=>{0===this.backgroundFetchBlockers.size&&this.fetch().catch(s.noop)},e.on("switchBranch",this.backgroundFetch)}init(){this.startAutoFetch()}startAutoFetch(){this.stopAutoFetch(),this.backgroundFetch(),this.autoFetchIntervalId=setInterval(this.backgroundFetch,this.fetchInterval)}stopAutoFetch(){this.autoFetchIntervalId&&(clearInterval(this.autoFetchIntervalId),this.autoFetchIntervalId=void 0)}async fetch(){if(this.currentFetch)return this.currentFetch;this.gitEventEmitter.emit("fetchStart",void 0),this.currentFetch=this.git.fetch().then(s.noop);try{if(await this.currentFetch,this.isDisposed)return;this.unblockBackgroundFetch(a.BackgroundFetchBlocker.NotAGitRepo),this.unblockBackgroundFetch(a.BackgroundFetchBlocker.SSHAuthError),this.unblockBackgroundFetch(a.BackgroundFetchBlocker.HTTPSAuthError),this.gitEventEmitter.emit("fetchEnd",void 0)}catch(t){if(this.isDisposed)return;const e=t instanceof Error?(0,r.getGitErrorCode)(t.message):void 0;throw e===r.GitErrorCode.NotAGitRepository?this.blockBackgroundFetch(a.BackgroundFetchBlocker.NotAGitRepo):e===r.GitErrorCode.SSHPermissionDenied?this.blockBackgroundFetch(a.BackgroundFetchBlocker.SSHAuthError):e===r.GitErrorCode.HTTPSAuthenticationFailed&&this.blockBackgroundFetch(a.BackgroundFetchBlocker.HTTPSAuthError),this.gitEventEmitter.emit("fetchFailed",void 0),t}finally{this.currentFetch=void 0}}blockBackgroundFetch(t){this.backgroundFetchBlockers.add(t)}unblockBackgroundFetch(t){this.backgroundFetchBlockers.delete(t)}unblockBackgroundFetchFromHTTPSAuthError(){this.unblockBackgroundFetch(a.BackgroundFetchBlocker.HTTPSAuthError)}dispose(){this.stopAutoFetch(),this.isDisposed=!0}}},80504:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GitHeadResourceSyncer=void 0;const s=i(53818),r=i(60814),a=i(93849),n="ref: ";e.GitHeadResourceSyncer=class{constructor(t,e,i){this.fs=e,this.gitFolderPath=i,this.onRefChange=({path:t})=>{const e=t===this.headPath,i=t===this.currentRefPath;if(e)this.currentRefPath&&this.fs.watchService.unwatchPath(this.currentRefPath,this.onRefChange).catch(a.reportError),this.updateHeadResource();else{if(!i)throw new Error("Unexpected file change in GitHeadResourceSyncer: "+t);{const t=this.fs.readFileSync(this.currentRefPath,"utf8").trim();this.gitHeadResource.applyChange((0,r.fullChange)({...this.gitHeadResource.getLatest(),commit:t}))}}},this.gitHeadResource=t.get(s.GIT_HEAD_RESOURCE_ID,this),this.headPath=this.fs.join(i,"HEAD")}async init(){this.fs.fileExistsSync(this.headPath)?(await this.fs.watchService.watchPath(this.headPath,this.onRefChange),this.updateHeadResource()):this.gitHeadResource.invalidate("No .git/HEAD file")}async dispose(){this.gitHeadResource.release(this),this.fs.fileExistsSync(this.headPath)&&await this.fs.watchService.unwatchPath(this.headPath,this.onRefChange),this.currentRefPath&&await this.fs.watchService.unwatchPath(this.currentRefPath,this.onRefChange)}updateHeadResource(){const t=this.fs.readFileSync(this.headPath,"utf8").trim();t||this.gitHeadResource.invalidate(".git/HEAD file is empty");const{refFile:e,branchName:i,commit:s}=this.parseHeadFile(t);if(e){const t=this.fs.join(this.gitFolderPath,e);if(this.fs.fileExistsSync(t)){this.currentRefPath=t;const e=this.fs.readFileSync(t,"utf8").trim();this.fs.watchService.watchPath(t,this.onRefChange).catch(a.reportError),this.gitHeadResource.applyChange((0,r.fullChange)({branch:i,commit:e}))}else this.gitHeadResource.applyChange((0,r.fullChange)({branch:i}))}else this.gitHeadResource.applyChange((0,r.fullChange)({commit:s}))}parseHeadFile(t){return t.startsWith(n)?{refFile:t.substr(n.length),branchName:t.substr("ref: refs/heads/".length)}:{commit:t}}}},79140:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GitMergeStateResourceSyncer=void 0;const s=i(53818),r=i(60814);e.GitMergeStateResourceSyncer=class{constructor(t,e,i){this.fs=e,this.gitFolderPath=i,this.fsListener=t=>{t.path===this.mergeMessagePath&&this.onMergeFileChange(t)},this.mergeStateResource=t.get(s.GIT_MERGER_STATE_RESOURCE_ID,this),this.mergeMessagePath=this.fs.join(i,"MERGE_MSG")}async init(){this.fs.directoryExistsSync(this.gitFolderPath)?(await this.fs.watchService.watchPath(this.gitFolderPath),this.fs.watchService.addGlobalListener(this.fsListener),this.fs.fileExistsSync(this.mergeMessagePath)&&this.enterMergeState()):this.mergeStateResource.invalidate("No .git folder")}async dispose(){this.mergeStateResource.release(this),this.fs.directoryExistsSync(this.gitFolderPath)&&(await this.fs.watchService.unwatchPath(this.gitFolderPath),this.fs.watchService.removeGlobalListener(this.fsListener))}onMergeFileChange(t){null!==t.stats?this.enterMergeState():this.exitMergeState()}enterMergeState(){const t=this.fs.readFileSync(this.mergeMessagePath,"utf8");this.mergeStateResource.applyChange((0,r.fullChange)({isMergeState:!0,mergeMessage:t}))}exitMergeState(){this.mergeStateResource.applyChange((0,r.fullChange)({isMergeState:!1}))}}},85131:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GitMonitoringService=void 0,e.GitMonitoringService=class{constructor(t,e){this.gitDetector=t,this.gitSyncRepo=e,this.started=!1}async start(){this.started||(this.started=!0,this.gitSyncRepo.init(),await this.gitDetector.init())}}},28958:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GitRepoStatusResourceSyncer=void 0;const s=i(5163),r=i(60814),a=i(53818),n=i(1706),o=i(93849),c=i(91570),h=s.__importDefault(i(78435));e.GitRepoStatusResourceSyncer=class{constructor(t,e,i,s,n,u){this.git=i,this.fsSyncer=s,this.gitEventEmitter=n,this.relativeToAbsolute=u,this.updateStatus=async t=>{this.currentDisposableUpdateStatus&&this.currentDisposableUpdateStatus.dispose(),this.currentDisposableUpdateStatus=this.disposableUpdateStatus(),await this.currentDisposableUpdateStatus.updateStatus(t),this.currentDisposableUpdateStatus=void 0},this.handleGitHeadChange=()=>this.updateStatus(),this.handleFsChange=()=>this.debouncedUpdateStatus(),this.disposableUpdateStatus=()=>{let t=!1;return{updateStatus:async e=>{try{this.currentGitStatus=this.git.status();const i=await this.currentGitStatus;if(this.currentGitStatus=void 0,t&&!(null==e?void 0:e.force))return;const s=this.getResourceValue(i),a=this.gitRepoStatusResource.getLatest();!(null==e?void 0:e.force)&&(0,h.default)(s,a)||this.gitRepoStatusResource.applyChange((0,r.fullChange)(s))}catch(t){t.message.includes("fatal: not a git repository")?(this.currentGitStatus=void 0,await this.dispose(),this.gitRepoStatusResource.invalidate("Not a git repo")):(0,o.reportError)(t)}},dispose:()=>t=!0}},this.updateStatusDebouncer=new c.Debouncer(this.updateStatus,300,500),this.debouncedUpdateStatus=this.updateStatusDebouncer.trigger.bind(this.updateStatusDebouncer),this.onFetchEnd=async()=>{await this.updateStatus()},this.gitHeadResource=t.get(a.GIT_HEAD_RESOURCE_ID,this),this.gitRepoStatusResource=e.get(a.GIT_REPO_STATUS_RESOURCE_ID,this)}async init(){await this.updateStatus(),this.fsSyncer.subscribeToFs(this.handleFsChange),this.gitEventEmitter.on("fetchEnd",this.onFetchEnd),this.gitHeadResource.subscribe(this.handleGitHeadChange)}async dispose(){this.updateStatusDebouncer.cancel(),this.gitHeadResource.unsubscribe(this.handleGitHeadChange),this.gitHeadResource.release(this),this.gitRepoStatusResource.release(this),this.fsSyncer.unsubscribeFromFs(this.handleFsChange),this.gitEventEmitter.off("fetchEnd",this.onFetchEnd),this.currentGitStatus&&await this.currentGitStatus}getResourceValue(t){const e=(0,n.statusResultToFilesMap)(t,this.relativeToAbsolute);return{ahead:t.ahead,behind:t.behind,conflicted:t.conflicted.map(this.relativeToAbsolute),staged:t.staged.map(this.relativeToAbsolute),filesMap:e}}}},81199:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GitService=void 0;const s=i(73654),r=i(53818);e.GitService=class{constructor(t,e,i,s,a){this.git=t,this.gitRepoStatusSyncer=i,this.gitEventEmitter=s,this.absoluteToRelative=a,this.gitRepoStatusResource=e.get(r.GIT_REPO_STATUS_RESOURCE_ID,this)}async getRemoteOriginUrl(){return(await this.git.raw(["config","--get","remote.origin.url"])).trim()}async getLogEntries(t){return(await this.git.raw(["log",`--format=${t}`])).trim()}undoLastCommit(){return this.git.raw(["reset","HEAD~"])}async undoChanges(t){const e=await this.forceStatusUpdate(),i=new Set(e.staged),s=t.filter((t=>i.has(t)));await this.git.raw(["reset","HEAD","-q",...s.map(this.absoluteToRelative)]);const a=t.map(this.absoluteToRelative),n=new Set(this.filterFilesByStatus(e.filesMap,(({modificationStatus:t})=>t===r.GitFileModificationStatus.Added))),o=[],c=[];for(const t of a)n.has(t)?o.push(t):c.push(t);o.length&&await this.cleanUntrackedPaths(o),c.length&&await this.git.raw(["checkout","-q",...c])}async revertAll(){await this.resetHard();const{filesMap:t}=await this.forceStatusUpdate();await this.cleanUntrackedPaths(this.getUntrackedGitPaths(t))}async commitFiles(t,e){const i=e.map(this.absoluteToRelative),{filesMap:s}=await this.forceStatusUpdate(),r=new Set(this.getUntrackedGitPaths(s)),a=i.filter((t=>r.has(t)));a.length&&await this.git.raw(["add","-A",...a]);try{return await this.git.commit(t,i)}catch(t){throw await this.git.raw(["reset","-q","HEAD",...a]),t}}async mergeFrom(t){return this.git.raw(["merge",t])}async commitAll(t){const{filesMap:e}=await this.forceStatusUpdate(),i=this.getUntrackedGitPaths(e);try{return await this.git.raw(["add","-A","."]),await this.git.commit(t)}catch(t){throw await this.git.raw(["reset","-q","HEAD",...i]),t}}async history({limit:t=50,skip:e}={}){const i={"--max-count":t.toString()};return e&&(i["--skip"]=e.toString()),this.git.log(i)}async createNewBranch(t){await this.git.raw(["checkout","-b",t]),this.gitEventEmitter.emit("createBranch",{branchName:t})}async switchBranch(t,e){const i=["-q"];if(e){const e=await this.getTrackingLocalBranch(t);e?(await this.git.checkout(e,i),t=e):(i.push("--track"),await this.git.checkout(t,i),t=(await this.git.status()).current,this.gitEventEmitter.emit("createBranch",{branchName:t}))}else await this.git.checkout(t,i);return this.gitEventEmitter.emit("switchBranch",{branchName:t}),t}async pushCurrentBranch(){const t=(await this.git.raw(["rev-parse","--abbrev-ref","HEAD"])).trim();await this.git.raw(["push","-u","origin",t])}async getTrackingBranch(t){return(await this.git.raw(["for-each-ref","--format","%(upstream:short)",`refs/heads/${t}`])).trim()||void 0}async forceStatusUpdate(){if(!this.gitRepoStatusResource.isValid())throw new Error(this.gitRepoStatusResource.getInvalidationMessage());await Promise.all([new Promise((t=>this.gitRepoStatusResource.subscribeOnce(t))),this.gitRepoStatusSyncer.updateStatus({force:!0})]);const t=this.gitRepoStatusResource.getLatest();if(null===t)throw new Error("GitRepoStatusResource is null after being updated, check GitRepoStatusResourceSyncer");return t}async cleanUntrackedPaths(t){const e=t.reduce(((t,e)=>{const i=s.win32.dirname(e);return t[i]||(t[i]=new Set),t[i].add(e),t}),{});await Promise.all(Object.values(e).map((t=>this.git.raw(["clean","-f","-q",...t]))))}async getTrackingLocalBranch(t){const e=(await this.git.raw(["for-each-ref","--format","%(refname:short)::%(upstream:short)","refs/heads"])).trim().split("\n");for(const i of e){const[e,s]=i.split("::");if(s===t)return e}}async resetHard(){await this.git.raw(["reset","HEAD","--hard","-q"])}getUntrackedGitPaths(t){return this.filterFilesByStatus(t,(t=>!t.tracked))}filterFilesByStatus(t,e){return Object.entries(t).filter((([,t])=>e(t))).map((([t])=>t)).map(this.absoluteToRelative)}}},51592:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GitSyncRepoService=void 0;const s=i(53818);e.GitSyncRepoService=class{constructor(t,e,i,r,a,n){this.git=t,this.gitService=e,this.gitFetcher=i,this.gitEventEmitter=a,this.trackingBranchManager=n,this.handleFetchStart=()=>{this.syncRepoResource.startFetching()},this.handleFetchEnd=()=>{this.syncRepoResource.doneFetching()},this.handleFetchFailed=()=>{this.syncRepoResource.fetchingFailed()},this.syncRepoResource=r.get(s.GIT_SYNC_REPO_RESOURCE_ID,this)}init(){this.gitEventEmitter.on("fetchStart",this.handleFetchStart),this.gitEventEmitter.on("fetchEnd",this.handleFetchEnd),this.gitEventEmitter.on("fetchFailed",this.handleFetchFailed)}dispose(){this.gitEventEmitter.off("fetchStart",this.handleFetchStart),this.gitEventEmitter.off("fetchEnd",this.handleFetchEnd),this.gitEventEmitter.off("fetchFailed",this.handleFetchFailed),this.syncRepoResource.release(this)}async syncRepo(){const{ahead:t,behind:e,filesMap:i}=await this.gitService.forceStatusUpdate();if(Object.keys(i).length)throw new Error("Cannot sync repo while having uncommitted changes");if(e){const{status:t}=await this.pull();if("conflict"===t)return t}t&&await this.push()}async pull(){this.syncRepoResource.startPulling();try{await this.git.pull(),this.gitEventEmitter.emit("pull",void 0);const{conflicted:t}=await this.gitService.forceStatusUpdate();if(t.length)return{status:"conflict"}}catch{throw new Error(s.PULL_FAILED)}finally{this.syncRepoResource.donePulling()}return{status:"done"}}async push(){this.syncRepoResource.startPushing();try{await this.git.push()}catch{throw new Error(s.PUSH_FAILED)}finally{this.syncRepoResource.donePushing(),await this.gitService.forceStatusUpdate()}}fetch(){return this.gitFetcher.fetch()}async pushCurrentBranch(){this.syncRepoResource.startPushing();try{await this.gitService.pushCurrentBranch()}finally{this.syncRepoResource.donePushing()}this.trackingBranchManager.reEvaluateValue(s.GIT_TRACKING_BRANCH_RESOURCE_ID)}}},47272:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(5163);s.__exportStar(i(24520),e),s.__exportStar(i(16778),e),s.__exportStar(i(43160),e),s.__exportStar(i(56098),e),s.__exportStar(i(32859),e),s.__exportStar(i(80504),e),s.__exportStar(i(79140),e),s.__exportStar(i(28958),e),s.__exportStar(i(81199),e),s.__exportStar(i(51592),e),s.__exportStar(i(43534),e),s.__exportStar(i(48433),e),s.__exportStar(i(10007),e),s.__exportStar(i(17965),e),s.__exportStar(i(8706),e),s.__exportStar(i(95116),e),s.__exportStar(i(91637),e),s.__exportStar(i(90427),e),s.__exportStar(i(1706),e)},43534:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.gitBranchListResourceHandler=void 0;const s=i(53818);e.gitBranchListResourceHandler={provide:t=>{if(t!==s.GIT_BRANCH_LIST_RESOURCE_ID)throw new Error("This is a single resource, use only `GIT_BRANCH_LIST_RESOURCE_ID` as an id");return{value:null}}}},48433:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GitFileStatusResourceComputer=void 0;const s=i(60814),r=i(53818);e.GitFileStatusResourceComputer=class{constructor(t){this.gitRepoStatusManager=t}compute(t){const e=this.gitRepoStatusManager.get(r.GIT_REPO_STATUS_RESOURCE_ID),i=e.getLatest(),a=(null==i?void 0:i.filesMap[t])?i.filesMap[t]:null,n=new Set([e]);return{value:a,dependencies:n,status:(0,s.getDefaultStatusHandling)(t,n)}}recompute(t){const{value:e,dependencies:i,status:r}=this.compute(t.getId());return{changes:JSON.stringify(t.getLatest())!==JSON.stringify(e)?[(0,s.fullChange)(e)]:[],dependencies:i,status:r}}}},10007:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.gitHeadResourceHandler=void 0;const s=i(53818);e.gitHeadResourceHandler={provide:t=>{if(t!==s.GIT_HEAD_RESOURCE_ID)throw new Error("This is a single resource, use only `GIT_HEAD_RESOURCE_ID` as an id");return{value:{}}}}},17965:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.gitMergeStateResourceHandler=void 0;const s=i(53818);e.gitMergeStateResourceHandler={provide:t=>{if(t!==s.GIT_MERGER_STATE_RESOURCE_ID)throw new Error("This is a single resource, use only `GIT_MERGER_STATE_RESOURCE_ID` as an id");return{value:{isMergeState:!1}}}}},8706:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.gitRepoStatusResourceHandler=void 0;const s=i(53818);e.gitRepoStatusResourceHandler={provide:t=>{if(t!==s.GIT_REPO_STATUS_RESOURCE_ID)throw new Error("This is a single resource, use only `GIT_REPO_STATUS_RESOURCE_ID` as an id");return{value:null}}}},95116:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.gitSyncRepoResourceHandler=void 0;const s=i(53818),r=i(49136);e.gitSyncRepoResourceHandler={provide:t=>{if(t!==s.GIT_SYNC_REPO_RESOURCE_ID)throw new Error("This is a single resource, use only `GIT_SYNC_REPO_RESOURCE_ID` as an id");return{value:r.gitSyncRepoDefaultValue}}}},91637:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GitTrackingBranchResourceComputer=void 0;const s=i(60814),r=i(53818);e.GitTrackingBranchResourceComputer=class{constructor(t,e){this.gitHeadManager=t,this.gitService=e}async compute(t,e){if(t!==r.GIT_TRACKING_BRANCH_RESOURCE_ID)throw new Error("This is a single resource, use only `GIT_TRACKING_BRANCH_RESOURCE_ID` as an id");const i=this.gitHeadManager.get(r.GIT_HEAD_RESOURCE_ID,e),a=new Set([i]),{branch:n}=i.getLatest();return n?{value:{trackingBranch:await this.gitService.getTrackingBranch(n)},dependencies:a,status:(0,s.getDefaultStatusHandling)(t,a)}:{value:{},dependencies:a,status:(0,s.getDefaultStatusHandling)(t,a)}}async recompute(t){const{value:e,dependencies:i,status:r}=await this.compute(t.getId(),t);return{changes:t.getLatest()!==e?[(0,s.fullChange)(e)]:[],dependencies:i,status:r}}}},90427:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0})},1706:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.statusResultToFilesMap=void 0;const s=i(53818);e.statusResultToFilesMap=function(t,e){const i={};return t.created.map(e).forEach((t=>{i[t]={modificationStatus:s.GitFileModificationStatus.Added,tracked:!0}})),t.not_added.map(e).forEach((t=>{i[t]={modificationStatus:s.GitFileModificationStatus.Added,tracked:!1}})),t.deleted.map(e).forEach((t=>{i[t]={modificationStatus:s.GitFileModificationStatus.Deleted,tracked:!0}})),t.modified.map(e).forEach((t=>{i[t]={modificationStatus:s.GitFileModificationStatus.Modified,tracked:!0}})),t.renamed.forEach((({from:t,to:r})=>{i[e(r)]={modificationStatus:s.GitFileModificationStatus.Renamed,from:e(t),tracked:!0}})),t.conflicted.map(e).forEach((t=>{i[t]={modificationStatus:s.GitFileModificationStatus.Conflicted,tracked:!0}})),i}},53818:(t,e)=>{"use strict";var i,s;Object.defineProperty(e,"__esModule",{value:!0}),e.PULL_FAILED=e.PUSH_FAILED=e.GIT_TRACKING_BRANCH_RESOURCE_ID=e.GIT_SYNC_REPO_RESOURCE_ID=e.GIT_MERGER_STATE_RESOURCE_ID=e.GIT_BRANCH_LIST_RESOURCE_ID=e.GIT_REPO_STATUS_RESOURCE_ID=e.GIT_HEAD_RESOURCE_ID=e.BackgroundFetchBlocker=e.GitFileModificationStatus=void 0,(s=e.GitFileModificationStatus||(e.GitFileModificationStatus={})).Modified="Modified",s.Renamed="Renamed",s.Deleted="Deleted",s.Added="Added",s.Conflicted="Conflicted",(i=e.BackgroundFetchBlocker||(e.BackgroundFetchBlocker={})).HTTPSAuthError="HTTPS_AUTH_ERROR",i.SSHAuthError="SSH_AUTH_ERROR",i.NotAGitRepo="NOT_A_GIT_REPO",e.GIT_HEAD_RESOURCE_ID="GIT_HEAD_RESOURCE_ID",e.GIT_REPO_STATUS_RESOURCE_ID="GIT_REPO_STATUS_RESOURCE_ID",e.GIT_BRANCH_LIST_RESOURCE_ID="GIT_BRANCH_LIST_RESOURCE_ID",e.GIT_MERGER_STATE_RESOURCE_ID="GIT_MERGER_STATE_RESOURCE_ID",e.GIT_SYNC_REPO_RESOURCE_ID="GIT_SYNC_REPO_RESOURCE_ID",e.GIT_TRACKING_BRANCH_RESOURCE_ID="GIT_TRACKING_BRANCH_RESOURCE_ID",e.PUSH_FAILED="PUSH_FAILED",e.PULL_FAILED="PULL_FAILED"},49136:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GitSyncRepoResource=e.gitSyncRepoDefaultValue=void 0;const s=i(60814);e.gitSyncRepoDefaultValue={isFetching:!1,isPulling:!1,isPushing:!1,fetchFailed:!1};class r extends s.Resource{startFetching(){this.applyChange((0,s.fullChange)({...this.getLatest(),isFetching:!0,fetchFailed:!1}))}doneFetching(){this.applyChange((0,s.fullChange)({...this.getLatest(),isFetching:!1,lastFetch:(new Date).getTime(),fetchFailed:!1}))}fetchingFailed(){this.applyChange((0,s.fullChange)({...this.getLatest(),isFetching:!1,fetchFailed:!0}))}startPulling(){this.applyChange((0,s.fullChange)({...this.getLatest(),isPulling:!0}))}donePulling(){this.applyChange((0,s.fullChange)({...this.getLatest(),lastFetch:(new Date).getTime(),isPulling:!1}))}startPushing(){this.applyChange((0,s.fullChange)({...this.getLatest(),isPushing:!0}))}donePushing(){this.applyChange((0,s.fullChange)({...this.getLatest(),lastFetch:(new Date).getTime(),isPushing:!1}))}}e.GitSyncRepoResource=r},99559:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(5163);s.__exportStar(i(53818),e),s.__exportStar(i(49136),e)},43934:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;const s=i(5163);s.__exportStar(i(31434),e);var r=i(31434);Object.defineProperty(e,"default",{enumerable:!0,get:function(){return s.__importDefault(r).default}})},2206:(t,e,i)=>{t.exports=i(43934)},60814:(t,e,i)=>{t.exports=i(73858)}}]);