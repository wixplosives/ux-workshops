(self.webpackChunk_wixc3_component_playground=self.webpackChunk_wixc3_component_playground||[]).push([[4021],{53818:(e,t)=>{"use strict";var s,i;Object.defineProperty(t,"__esModule",{value:!0}),t.PULL_FAILED=t.PUSH_FAILED=t.GIT_TRACKING_BRANCH_RESOURCE_ID=t.GIT_SYNC_REPO_RESOURCE_ID=t.GIT_MERGER_STATE_RESOURCE_ID=t.GIT_BRANCH_LIST_RESOURCE_ID=t.GIT_REPO_STATUS_RESOURCE_ID=t.GIT_HEAD_RESOURCE_ID=t.BackgroundFetchBlocker=t.GitFileModificationStatus=void 0,(i=t.GitFileModificationStatus||(t.GitFileModificationStatus={})).Modified="Modified",i.Renamed="Renamed",i.Deleted="Deleted",i.Added="Added",i.Conflicted="Conflicted",(s=t.BackgroundFetchBlocker||(t.BackgroundFetchBlocker={})).HTTPSAuthError="HTTPS_AUTH_ERROR",s.SSHAuthError="SSH_AUTH_ERROR",s.NotAGitRepo="NOT_A_GIT_REPO",t.GIT_HEAD_RESOURCE_ID="GIT_HEAD_RESOURCE_ID",t.GIT_REPO_STATUS_RESOURCE_ID="GIT_REPO_STATUS_RESOURCE_ID",t.GIT_BRANCH_LIST_RESOURCE_ID="GIT_BRANCH_LIST_RESOURCE_ID",t.GIT_MERGER_STATE_RESOURCE_ID="GIT_MERGER_STATE_RESOURCE_ID",t.GIT_SYNC_REPO_RESOURCE_ID="GIT_SYNC_REPO_RESOURCE_ID",t.GIT_TRACKING_BRANCH_RESOURCE_ID="GIT_TRACKING_BRANCH_RESOURCE_ID",t.PUSH_FAILED="PUSH_FAILED",t.PULL_FAILED="PULL_FAILED"},49136:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GitSyncRepoResource=t.gitSyncRepoDefaultValue=void 0;const i=s(60814);t.gitSyncRepoDefaultValue={isFetching:!1,isPulling:!1,isPushing:!1,fetchFailed:!1};class o extends i.Resource{startFetching(){this.applyChange((0,i.fullChange)({...this.getLatest(),isFetching:!0,fetchFailed:!1}))}doneFetching(){this.applyChange((0,i.fullChange)({...this.getLatest(),isFetching:!1,lastFetch:(new Date).getTime(),fetchFailed:!1}))}fetchingFailed(){this.applyChange((0,i.fullChange)({...this.getLatest(),isFetching:!1,fetchFailed:!0}))}startPulling(){this.applyChange((0,i.fullChange)({...this.getLatest(),isPulling:!0}))}donePulling(){this.applyChange((0,i.fullChange)({...this.getLatest(),lastFetch:(new Date).getTime(),isPulling:!1}))}startPushing(){this.applyChange((0,i.fullChange)({...this.getLatest(),isPushing:!0}))}donePushing(){this.applyChange((0,i.fullChange)({...this.getLatest(),lastFetch:(new Date).getTime(),isPushing:!1}))}}t.GitSyncRepoResource=o},99559:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=s(5163);i.__exportStar(s(53818),t),i.__exportStar(s(49136),t)},94256:(e,t,s)=>{e.exports=s(99559)},14667:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=s(5163),o=s(60814),n=s(2206),a=i.__importDefault(s(16894)),r=s(79628),l=s(3092),d=s(30802),g=s(65432),c=s(44401),u=s(26709);a.default.setup(n.processingEnv,(({demoListManager:e,demoErrorManager:t,environmentPropsManager:s},{simpleAST:{simpleAST:i,simpleASTPlugin:n,sourceIdResource:a,simpleASTPluginRepo:p,languageASTPlugin:h},gitRevision:{gitFileStatusResourceManager:m},project:{fs:R,projectService:_},fileComponents:{componentsManager:f},typescript:{editorConfig:C},fileAssets:{assets:E},codeExecution:{fileDependencyResourceFactory:D}})=>{h.register(r.jsxFileConvertor),h.register(r.jsxOwnerConvertor),h.register(r.jsxOwnerFunctionConvertor),n.register(d.simulationPlugin),n.register(u.demoPlugin);const S=t.provide({handler:{provide:()=>({value:{errors:{}}})}}),T=new c.DemoListComputeHandler(D,E,i,p,R,m,f,(()=>_.getProjectPath()));return{demoErrorManager:S,demoListManager:e.provide({manipulator:l.demoListManipulator,dependencies:[E,m,i],handler:T}),simulationProcessingService:new r.SimulationProcessingService({editorConfig:C,projectService:_,simpleAstManager:i,sourceIdResourceManager:a,simpleASTPluginRepo:p}),environmentPropsManager:s.provide({manipulator:o.fullChangeManipulator,dependencies:[i],handler:new g.EnvPropsComputeHandler(i,p)})}}))},44401:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DemoListComputeHandler=void 0;const i=s(5163),o=s(26315),n=s(3092),a=i.__importDefault(s(78435)),r=s(9240),l=i.__importDefault(s(72321)),d=s(26427),g=s(94256),c=s(91570),u=s(26709),p=s(8260);t.DemoListComputeHandler=class{constructor(e,t,s,i,n,a,r,l){this.dependencyResourceManager=e,this.fileAssetsReourceManager=t,this.simpleAstManager=s,this.simpleASTPluginRepo=i,this.fs=n,this.versionControlResourceManager=a,this.componentsResourceManager=r,this.getProjectPath=l,this.resolveRequest=(0,o.createRequestResolver)({fs:this.fs,extensions:c.resolveExtensions})}async compute({exportName:e,filePath:t}){l.default.mark(d.COMPUTE_DEMO_LIST_MARK);const s=new Set,i=[],o=this.componentsResourceManager.get({exportName:e,filePath:t});if(s.add(o),!o.isValid())return{value:[],dependencies:s,status:{valid:!1,message:o.getInvalidationMessage()}};const a=this.fileAssetsReourceManager.get(this.getProjectPath());s.add(a);const r=a.getFilesWithTag(u.DEMO_FILE_TAG);for(const o of r)if(await this.isDemoDependentOnComponent(o,t)){const n=this.getSimpleAstResource(o);s.add(n);const a=this.getComponentDemoFromResource(n,o,t,e);a&&(i.push(a),s.add(this.versionControlResourceManager.get(o)))}return{value:i.sort(n.sortDemos),dependencies:s,status:{valid:!0}}}async isDemoDependentOnComponent(e,t){const s=(await this.dependencyResourceManager.getReady(e)).getLatest();return Object.values(s).includes(t)}getComponentDemoFromResource(e,t,s,i){const o=this.findDemo(e);if((0,u.isDemoNode)(o))return this.getComponentDemoFromDemoNode(o,t,s,i)}getComponentDemoFromDemoNode(e,t,s,i){if(this.componentExistsInDemo(e,t,s,i))return this.getComponentDemo(e,t,s,i)}getComponentDemo(e,t,s,i){try{const o=this.versionControlResourceManager.get(t),a=this.isFileModified(o);return{id:{filePath:t,componentTypeRef:(0,n.getComponentRef)(s,i)},name:e.name.value,isModified:a}}catch(e){}}componentExistsInDemo(e,t,s,i){return(0,p.findComponents)(e.demo,this.simpleASTPluginRepo.getPlugins()).some((e=>e.targetExport==i))}getDemoList(e,t){const s=[],i=this.findDemo(e);if(!(0,u.isDemoNode)(i))return[];const o=new Set;return(0,p.findComponents)(i.demo,this.simpleASTPluginRepo.getPlugins()).forEach((e=>{const a=this.resolveComponentPath(t,e),r=a&&(0,n.getComponentRef)(a,e.targetExport),l=r&&this.getComponentDemo(i,t,a,e.targetExport);l&&!o.has(r)&&(s.push(l),o.add(r))})),s}resolveComponentPath(e,t){return this.resolveRequest(this.fs.dirname(e),t.targetFile).resolvedFile||void 0}findDemo(e){const t=e.getLatest();return(0,r.findNode)(t,this.simpleASTPluginRepo.getPlugins(),u.isDemoNode)}recompute(e,t,s,i){l.default.mark(d.RECOMPUTE_DEMO_LIST_MARK);let o=new Set(i);const r=[];if(!e.isValid())return{changes:r,dependencies:o,status:e.getStatus()};const g=Array.from(i).filter((e=>!e.isValid()&&e.getType()===this.simpleAstManager.getTypeName()));let c=e.getLatest();for(const i of s){const s=i.getType(),l=[];if(s===this.fileAssetsReourceManager.getTypeName()){const{changes:n,dependencies:a}=this.getLocationsRelatedUpdates(i,t[s][i.getSerializedId()],o,e);l.push(...n),o=a}else if(s===this.simpleAstManager.getTypeName()){const t=i,s=t.getId().filePath,{filePath:o,exportName:r}=e.getId(),d=this.findDemo(t);if((0,u.isDemoNode)(d)){const e=this.getComponentDemoFromDemoNode(d,s,o,r),t=[(0,n.createUpdateFileDemosChange)(s,e?[e]:[])];let i=c;for(const e of t)i=(0,n.demoListReducer)(c,e).value;c=c.sort(n.sortDemosByFile),i=i.sort(n.sortDemosByFile),(0,a.default)(c,i)||l.push(...t)}}else if(s===this.versionControlResourceManager.getTypeName()){const e=i.getId(),t=c.find((t=>t.id.filePath===e));if(t){const e=this.versionControlResourceManager.get(t.id.filePath);l.push({kind:n.DemoListChangeKind.UPDATE_MODIFIED,demoId:t.id,isModified:this.isFileModified(e)})}}r.push(...l)}for(const e of s)e.getType()===this.simpleAstManager.getTypeName()&&g.includes(e)&&"Deleted"===e.getInvalidationMessage()&&r.push((0,n.createUpdateFileDemosChange)(e.getId().filePath,[]));return{changes:r,dependencies:o,status:e.getStatus()}}getLocationsRelatedUpdates(e,t,s,i){if(t.isDisposed())return{changes:[],dependencies:s};const o=[],a=new Set(s),r=e.getProjection(t),l=e.getFilesWithTag(u.DEMO_FILE_TAG,r),d=e.getFilesWithTag(u.DEMO_FILE_TAG),g=d.filter((e=>!l.includes(e))),c=l.filter((e=>!d.includes(e)));for(const e of g){const t=this.getSimpleAstResource(e),s=t.getId().filePath,{filePath:r,exportName:l}=i.getId(),d=this.findDemo(t);if((0,u.isDemoNode)(d)&&this.componentExistsInDemo(d,s,r,l)){a.add(t),a.add(this.versionControlResourceManager.get(e)),t.isValid()||o.push((0,n.createUpdateFileDemosChange)(e,[]));try{o.push(...this.getAstRelatedChanges(t,e))}catch(e){}}}for(const e of c){const t=[...a].filter((t=>{this.simpleAstManager.isResourceOfType(t)&&t.getId().filePath===e||this.versionControlResourceManager.isResourceOfType(t)&&t.getId()}));for(const e of t)a.delete(e);o.push((0,n.createUpdateFileDemosChange)(e,[]))}return{changes:o,dependencies:a}}getSimpleAstResource(e){return this.simpleAstManager.get({filePath:e,parsers:[...this.simpleASTPluginRepo.getPlugins().values(),u.demoPlugin].map((e=>e.nodeKind))})}getAstRelatedChanges(e,t){return this.getDemoList(e,t).map((e=>(0,n.createUpdateFileDemosChange)(t,[e])))}isFileModified(e){const t=e.getLatest();return!!t&&t.modificationStatus===g.GitFileModificationStatus.Modified}}}}]);